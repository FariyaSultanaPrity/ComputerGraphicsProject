#include<bits/stdc++.h>
#include<windows.h>
#include <GL/gl.h>
#include <GL/glut.h>
///For music
#include <Mmsystem.h>
#include<windows.h>
#include<fstream>

using namespace std;
#pragma comment(lib, "Winmm.lib")
#define int GLint
#define PI 3.1416



float sun_x=620 ,sun_y=330,sp_x=0.5f,sp_y=1.0f,plane_x=0.0f, plane_speed=4.5f,_rain = 0.0;

bool rainday = false, day = true,fire=true;


///Circle
void circle(GLfloat x, GLfloat y, GLfloat rad){
    GLint triangle_amt=60,i;
    GLfloat t_pi=2*PI;
    glBegin(GL_TRIANGLE_FAN);
    //glColor3ub(43,78,88);
    glVertex2f(x,y);
    for(i=0;i<=triangle_amt;i++){
        GLfloat dx=rad*cos(i*t_pi/triangle_amt), dy=rad*sin(i*t_pi/triangle_amt);
        glVertex2f(x+dx,y+dy);
    }
    glEnd();
}

///Sky
void sky(){
    glPushMatrix();
    if(day)glColor3ub(157, 216, 250);
    else glColor3ub(4, 11, 51);

    glBegin(GL_POLYGON);
    glVertex2i(0,300);
    glVertex2i(1000,300);
    glVertex2i(1000,500);
    glVertex2i(0,500);
    glEnd();
    glPopMatrix();
}




///Airplane Design
void airPlane(){
    glPushMatrix();
    glTranslatef(plane_x,370,0);

    glPushMatrix();
    glTranslatef(0,75,0);
    ///body
    glColor3f(1.0, 1.0, 1.0);
        glBegin(GL_POLYGON); //rectangular body
        glVertex2f(0.0, 30.0*0.4);
        glVertex2f(0.0, 55.0*0.4);
        glVertex2f(135.0*0.4, 55.0*0.4);
        glVertex2f(135.0*0.4, 30.0*0.4);
        glEnd();

        glColor3f(1.0, 1.0, 1.0);
        glBegin(GL_POLYGON); //upper triangle construction plane
        glVertex2f(135.0*0.4, 55.0*0.4);
        glVertex2f(150.0*0.4, 50.0*0.4);
        glVertex2f(155.0*0.4, 45.0*0.4);
        glVertex2f(160.0*0.4, 40.0*0.4);
        glVertex2f(135.0*0.4, 40.0*0.4);
        glEnd();

        glColor3f(0.0, 0.0, 0.0);
        glBegin(GL_LINE_LOOP); //outline of upper triangle plane
        glVertex2f(135.0*0.4, 55.0*0.4);
        glVertex2f(150.0*0.4, 50.0*0.4);
        glVertex2f(155.0*0.4, 45.0*0.4);
        glVertex2f(160.0*0.4, 40.0*0.4);
        glVertex2f(135.0*0.4, 40.0*0.4);
        glEnd();

        glColor3f(1.0, 0.0, 0.0);
        glBegin(GL_POLYGON); //lower triangle
        glVertex2f(135.0*0.4, 40.0*0.4);
        glVertex2f(160.0*0.4, 40.0*0.4);
        glVertex2f(160.0*0.4, 37.0*0.4);
        glVertex2f(145.0*0.4, 30.0*0.4);
        glVertex2f(135.0*0.4, 30.0*0.4);
        glEnd();

        glColor3f(1.0, 0.0, 0.0);
        glBegin(GL_POLYGON); //back wing
        glVertex2f(0.0, 55.0*0.4);
        glVertex2f(0.0, 80.0*0.4);
        glVertex2f(10.0*0.4, 80.0*0.4);
        glVertex2f(40.0*0.4, 55.0*0.4);
        glEnd();
        // glPopMatrix();

        // glPushMatrix();

        glColor3f(1.0, 0.0, 0.0);
        glBegin(GL_POLYGON); //left side wing
        glVertex2f(65.0*0.4, 55.0*0.4);
        glVertex2f(50.0*0.4, 70.0*0.4);
        glVertex2f(75.0*0.4, 70.0*0.4);
        glVertex2f(90.0*0.4, 55.0*0.4);
        glEnd();

        glColor3f(1.0, 0.0, 0.0);
        glBegin(GL_POLYGON); //rightside wing
        glVertex2f(70.0*0.4, 40.0*0.4);
        glVertex2f(100.0*0.4, 40.0*0.4);
        glVertex2f(80.0*0.4, 15.0*0.4);
        glVertex2f(50.0*0.4, 15.0*0.4);

        glEnd();
glPopMatrix();
    glPopMatrix();


}
void field(){
glPushMatrix();
    if(day)glColor3ub(96,185,34);
    else glColor3ub(96,185,34);

    glBegin(GL_POLYGON);
    glVertex2i(0,0);
    glVertex2i(1000,0);
    glVertex2i(1000,300);
    glVertex2i(0,300);
    glEnd();
    glPopMatrix();



}


///Main
void display(){
	glClear(GL_COLOR_BUFFER_BIT);
    glColor3f(255.0,0.0,1.0);

	sky();

	
    airPlane();
   

	glFlush();
}
void init(void){
	glClearColor(0.65, 1.0, 1.0, 0.0);
	glMatrixMode(GL_PROJECTION);
	gluOrtho2D(0.0, 1000.0, 0.0, 500.0);
}

void update(int value){

    ///AirPlane Control
    if(plane_x>1000){
        plane_x=-100;
    }
    plane_x+=plane_speed;

    glutTimerFunc(100, update, 0);
    glutPostRedisplay();

    

}

void Rain(int value){

if(rainday){

    _rain += 0.01f;

    glBegin(GL_POINTS);
    for(int i=1;i<=1000;i++)
    {
        int x=rand(),y=rand();
        x%=1000; y%=1000;
        glBegin(GL_LINES);
        glColor3f(1.0, 1.0, 1.0);
        glVertex2d(x,y);
        glVertex2d(x+5,y+5);
        glEnd();
    }

	glutPostRedisplay();
	glutTimerFunc(5, Rain, 0);

    glFlush();

}
}



void handleKeypress(unsigned char key, int x, int y){
	switch (key){
        case 'd':
            day=1;
            break;
        case 'n':
            day=0;
            break;
            case 'r':
        rainday = true;
        Rain(_rain);
        //sndPlaySound("River.wav",SND_ASYNC|SND_LOOP);
        //sndPlaySound("River.wav",SND_MEMORY|SND_ASYNC);
        break;

    case 's':
        rainday = false;
		//sndPlaySound(NULL,SND_ASYNC);
        break;

        
        glutPostRedisplay();
	}
}
void credit(){

    cout<<"------------------------------------------------------"<<endl;
    cout<<"Press d for Day "<<endl;
    cout<<"Press n for Night "<<endl;
    cout<<"Press r for Rain "<<endl;
    cout<<"Press s for Stop Rain "<<endl;
   

    cout<<"------------------------------------------------------"<<endl;

}
int main(int argc, char** argv){
    credit();
    ///Music Background
    //PlaySound(TEXT("sound.wav"), NULL, SND_ASYNC);
    ///system("pause");

	glutInit(&argc, argv);
	glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB);
	glutInitWindowPosition(0, 0);
	glutInitWindowSize(1900, 1900);
	glutCreateWindow("CG Project- War Zone");
	init();
	glutDisplayFunc(display);
    glutKeyboardFunc(handleKeypress);

    glutTimerFunc(1000, update, 0);
    glutMainLoop();
}

