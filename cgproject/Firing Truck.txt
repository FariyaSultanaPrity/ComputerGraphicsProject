#include<bits/stdc++.h>
#include<windows.h>
#include <GL/gl.h>
#include <GL/glut.h>
///For music
#include <Mmsystem.h>
#include<windows.h>
#include<fstream>

using namespace std;
#pragma comment(lib, "Winmm.lib")
#define int GLint
#define PI 3.1416



float TruckTireRotateAngle = 0.0f;
int _TruckMoveReverse = 0;


void TruckTire(int xx, int yy, float r)//C029//H103
{
    glMatrixMode(GL_MODELVIEW);
 glPushMatrix();
glTranslatef(0.0f,0.0f,0.0f);
glRotatef(TruckTireRotateAngle, 0.0f, 0.0f,1.0f);
glTranslatef(-0.0f,-0.0f,0.0f);
glBegin(GL_POLYGON); // Draw a Red 1x1 Square centered at origin
    for (int i = 0; i < 200; i++)
    {

        float pi = 3.1416;
        float A = (i * 2 * pi) / 200;

        float x = r * cos(A);
        float y = r * sin(A);
        glVertex2f(x + xx, y + yy);
    }
    glEnd();
    glBegin(GL_LINES);
    glColor3ub(0,0,0);//black-rim
    glVertex2f(-0.075,0);
    glVertex2f(0.075,0);

    glVertex2f(-0.05,-0.075);
    glVertex2f(0.05,0.075);

    glVertex2f(0.05,-0.075);
    glVertex2f(-0.05,0.075);

    glVertex2f(0,-0.1);
    glVertex2f(0,0.1);

    glEnd();

    glPopMatrix();

}
void TruckScaledTire()
{
    glMatrixMode(GL_MODELVIEW);
    glPushMatrix();
    glTranslatef(140.1,95,0);
    glScalef(90,90,0);
    glColor3ub(0,0,0);//black-tire
    TruckTire(0, 0, 0.2);
    glColor3ub(192,192,192);//silver-tire-rim
    TruckTire(0,0,0.13);
    glColor3ub(211,211,255);//grey-tire-rim
    TruckTire(0,0,0.09);
    glPopMatrix();
}

void TruckBody()
{

    glColor3ub(128,128,0); //blue-body

    glBegin(GL_POLYGON);
    glVertex2f(150, 152);
    glVertex2f(190, 152);
    glVertex2f(215, 127);
    glVertex2f(240, 127);
    glVertex2f(240, 92);
    glVertex2f(150,92);
    glEnd();

    glBegin(GL_POLYGON);//trolly
    glVertex2f(150, 129);
    glVertex2f(60,129);
    glVertex2f(60,92);
    glVertex2f(150,92);
    glEnd();
     glBegin(GL_POLYGON);//trolly-cargo
     glColor3ub(169, 120, 53);//brown
    glVertex2f(70,129);
    glVertex2f(100,129);
    glVertex2f(100, 152);
    glVertex2f(70,152);
    glEnd();

    glColor3ub(9, 12, 53);//black
     //text(90.0,130.0,text3);
    glBegin(GL_POLYGON); //back-light
    glColor3ub(255, 0, 0);
    glVertex2f(110-50, 92);
    glVertex2f(115-50, 92);
    glVertex2f(115-50, 117);
    glVertex2f(110-50, 117);
    glEnd();

    glBegin(GL_POLYGON); //window
    glColor3ub(0, 0, 0);//black-window-in-day
    if(!day)
    glColor3ub(163, 228, 215);//gray-window-in-night
    glVertex2f(150, 152);
    glVertex2f(190, 152);
    glVertex2f(215, 127);
    glVertex2f(210, 127);
    glVertex2f(150, 127);
    glVertex2f(130, 127);
    glEnd();





    glBegin(GL_POLYGON); //window-Divider
    glColor3ub(192, 192, 192);
    glVertex2f(170, 152);
    glVertex2f(165, 152);
    glVertex2f(165, 127);
    glVertex2f(170, 127);
    glEnd();



    glBegin(GL_POLYGON); //roof-plate
    glColor3ub(168, 169, 173);

    glVertex2f(150, 152);
    glVertex2f(190, 152);
    glVertex2f(185, 157);
    glVertex2f(150, 157);
    glEnd();

    glBegin(GL_POLYGON); //window-holder-front
    glColor3ub(168, 169, 173);
    glVertex2f(190, 152);
    glVertex2f(215, 127);
    glVertex2f(210, 127);
    glVertex2f(185, 152);
    glEnd();

    glBegin(GL_POLYGON); //window-holder-back
    glColor3ub(168, 169, 173);
    glVertex2f(140+20-10, 157);
    glVertex2f(115+20, 127);
    glVertex2f(125+20, 127);
    glVertex2f(140+20-10, 152);
    glEnd();

    glBegin(GL_POLYGON); //foot-holder
    glColor3ub(168, 169, 173);
    glVertex2f(242, 92);
    glVertex2f(60, 92);
    glVertex2f(60, 97);
    glVertex2f(242, 97);

    glEnd();

    glBegin(GL_POLYGON);      //mirror
    glColor3f(0, 0, 0.1373);
    glVertex2f(211.5, 134.5);
    glVertex2f(204.5, 135.5);
    glVertex2f(203.5, 129);
    glVertex2f(210.5, 127);
    glEnd();

    glBegin(GL_POLYGON);      //Yellow-headlight
    glColor3f(1.0, 1.0, 0.0); //body
    glVertex2f(210.5+28, 134.5-10);
    glVertex2f(203.5+28, 135.5-10);
    glVertex2f(203.5+28, 129-10);
    glVertex2f(210.5+28, 127-10);
    glEnd();
    if(!day)
    {
        glBegin(GL_POLYGON);      //Yellow-headlight
        glColor3f(1.0, 1.0, 1.0); //body
        glVertex2f(210.5+28+90, 134.5-10-0);
        glVertex2f(205.5+28, 134.5-10);
        glColor3f(0.8, 0.9, 0.0);
        glVertex2f(205.5+28, 127-10);
        glVertex2f(210.5+28+90, 127-10-30);
        glEnd();

    }

    glBegin(GL_POLYGON); //window-opener-1
    glColor3ub(192, 192, 192);
    glVertex2f(150-15-5+20, 127-5-3);
    glVertex2f(155-5-5+20, 127-5-3);
    glVertex2f(155-5-5+20, 129-5);
    glVertex2f(150-15-5+20, 129-5);
    glEnd();
    glBegin(GL_POLYGON); //window-opener-2
    glColor3ub(192, 192, 192);
    glVertex2f(150-15+40, 127-5-3);
    glVertex2f(155-5+40, 127-5-3);
    glVertex2f(155-5+40, 129-5);
    glVertex2f(150-15+40, 129-5);
    glEnd();
}
void TruckThrust()
{
    if(day)
    {
        glBegin(GL_POLYGON);
        glColor3ub(168, 169, 173);
        glVertex2f(110-50, 92);
        glColor3ub(255, 255, 255);
        glVertex2f(00-50, 80);
        glVertex2f(00-50, 110);
        glColor3ub(0, 0, 0);
        glVertex2f(110-50, 97);
        glEnd();
    }


}
void fullTruck()
{

    TruckBody();
    glPushMatrix();
    glTranslatef(65,0,0);
    TruckScaledTire();
    glTranslatef(-85,0,0);
    TruckScaledTire();
    glPopMatrix();

}
void TruckReverse()
{
    glLineWidth(1);

    glTranslatef(-100.5, 0, 0);

    fullTruck();


}
void rocket(){
        glBegin(GL_POLYGON);

        glColor3ub(255, 255, 255);//body

        glVertex2f(250, 200);
        glVertex2f(300, 200);
        glVertex2f(300, 220);
        glVertex2f(250, 220);

        glEnd();

        glBegin(GL_POLYGON);
        glColor3ub(255, 0, 0);//head

        glVertex2f(250, 200);
        glVertex2f(250, 220);
        glVertex2f(230, 210);

        glEnd();

        glBegin(GL_POLYGON);
        glColor3ub(255, 0, 0);//leg

        glVertex2f(300, 200);
        glVertex2f(300, 220);
        glVertex2f(305, 225);
        glVertex2f(305, 195);

        glEnd();


        glPushMatrix();
    if(fire)glTranslatef(bul,0,0);
        glBegin(GL_POLYGON);
        glColor3ub(105,105,105);//bullet

        glVertex2f(230, 208);
        glVertex2f(230, 212);
        glVertex2f(220, 212);
        glVertex2f(220, 208);

        glEnd();
        glPopMatrix();





}
void ScaledTruckReverse()
{
    glMatrixMode(GL_MODELVIEW);
    glPushMatrix();
    glTranslatef(500,140,0);
    glScalef(-0.7,0.7,0);
    TruckReverse();
    glPopMatrix();

    glPushMatrix();
    glTranslatef(190,48,0);
    rocket();
    glPopMatrix();

}

///Main
void display(){
	glClear(GL_COLOR_BUFFER_BIT);
    glColor3f(255.0,0.0,1.0);

	sky();

    ScaledTruckReverse();



	glFlush();
}
void init(void){
	glClearColor(0.65, 1.0, 1.0, 0.0);
	glMatrixMode(GL_PROJECTION);
	gluOrtho2D(0.0, 1000.0, 0.0, 500.0);
}

void update(int value){

    
    glutTimerFunc(100, update, 0);
    glutPostRedisplay();

    ///Bullet Control
    bul -= 20;
	if (bul <-410)
    {
        bul = 0;
    }

}





void handleKeypress(unsigned char key, int x, int y){
	switch (key){
        case 'd':
            day=1;
            break;
        case 'n':
            day=0;
            break;
           
        case 'f':
        fire = true;
		//sndPlaySound(NULL,SND_ASYNC);
        break;

        case 'o':
        fire = false;
		//sndPlaySound(NULL,SND_ASYNC);
        break;

        glutPostRedisplay();
	}
}
void credit(){

    cout<<"------------------------------------------------------"<<endl;
    cout<<"Press d for Day "<<endl;
    cout<<"Press n for Night "<<endl;
   
    cout<<"Press f for Fire "<<endl;
    cout<<"Press o for Stop Fire "<<endl;

    cout<<"------------------------------------------------------"<<endl;

}
int main(int argc, char** argv){
    credit();
    ///Music Background
    //PlaySound(TEXT("sound.wav"), NULL, SND_ASYNC);
    ///system("pause");

	glutInit(&argc, argv);
	glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB);
	glutInitWindowPosition(0, 0);
	glutInitWindowSize(1900, 1900);
	glutCreateWindow("CG Project- War Zone");
	init();
	glutDisplayFunc(display);
    glutKeyboardFunc(handleKeypress);

    glutTimerFunc(1000, update, 0);
    glutMainLoop();
}

